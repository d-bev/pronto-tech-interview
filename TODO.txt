
META / PLANNING:

If frontend is going to spam back-end with GET requests:
    put the GET request function on a timer
    make the backend function run once per GET request
    have this data display on the webpage
    implement logic within the frontend to handle the 'top 10' portion of the problem:
        "Display the top 10 sorted by maximum 'measurement', descending."

IDEAS:
    make the frontend a REACT app

        have the backend run continuously and constantly update its nested dict
        use REACT hooks to handle the constant updates made to the nested dict
            have some code on the backend that more or less does:

        OR 

        have the backend run continuously and constantly spit the entries it makes at the frontend
        use REACT hooks to update the state with the constant stream of info

    maintain the same structure that I have



IMPROVEMENTS I'D LIKE TO MAKE:

    write dict to a JSON file, so we can load it each main() call:
        read the dict
        accept another batch of messages
        update the dict
        send the updated data to the frontend

    Change frontend:
        have the GET request trigger when the page is done loading
        send another GET request as soon as we're done displaying the response on the webpage
            this would probably just be having the "onload" handler call itself when it was done
            I would also make the batch size smaller, so the data being displayed on the frontend is closer to real-time

